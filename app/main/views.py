from datetime import datetimeimport jsonfrom flask import g, render_template, redirect, url_for, abort, flash, request, \    current_app, make_response, jsonifyfrom flask.ext.sqlalchemy import get_debug_queriesfrom flask.ext.httpauth import HTTPBasicAuthfrom . import mainfrom .forms import TodoFormfrom .. import dbfrom ..models import Todo, Userfrom app.exceptions import ValidationError# will be used for restfull authenticationauth = HTTPBasicAuth()@main.route('/', methods=['GET'])@main.route('/todos/', methods=['GET'])def index():    """ index is the home page of the Todo Application """    todos = Todo.query.order_by(Todo.publication_date.desc()).all()    return render_template('index.html', todos=todos)@main.route('/todos/<int:todo_id>', methods=['GET', 'POST'])def show_or_update(todo_id):    """     as the name indicates, it either shows or updates the todo item.     :param todo_id: the identifer    """    todo_item = Todo.query.get_or_404(todo_id)    # if it is GET, so we only need to redirect to the todo page    if request.method == 'GET':        return render_template('show.html', todo=todo_item)    # handing post    todo_item.title = request.form['title']    todo_item.body = request.form['body']    todo_item.done = ('done.%d' % todo_id) in request.form    db.session.commit()    # Flashes are shown on the home page    flash('Todo "%s" updated..' % request.form['title'])    # it is "main.index" as we have used the Blueprint rather than a simple @app    return redirect(url_for('main.index'))@main.route('/todos/new', methods=['GET', 'POST'])def new():    """ to create a new todo """    form = TodoForm()    if request.method == 'POST':        todo = Todo(g.user, request.form['title'], request.form['body'])        db.session.add(todo)        db.session.commit()        flash('Todo "%s" created..' % request.form['title'])        return redirect(url_for('main.index'))    return render_template('new.html', form=form)  # in case of GET@main.route('/todos/delete/<int:todo_id>', methods=['GET', 'POST'])def delete(todo_id):    """    to delete a todo    :param todo_id: the identifer    """    todo_to_delete = Todo.query.get_or_404(todo_id)    db.session.delete(todo_to_delete)    db.session.commit()    flash('Todo deleted')    return redirect(url_for('main.index'))# following two functions are basic methods for handling authentication.# it is used for RESTful services and only tests if the usr provides# the credentials as "test:test"# @auth.get_password# def get_password(username):##     if username == 'test':#         return 'test'#     return None@auth.verify_passworddef verify_password(username, password):    user = User.query.filter_by(username=username).first()    if not user or not user.verify_password(password):        return False    g.user = user    return True@auth.error_handlerdef unauthorized():    return make_response(jsonify({'error': 'unauthorized Access'}), 403)# These are the RESTful services (GET, PUT, POST, DELETE)@main.route('/todos/api/v1.0/users', methods = ['POST'])def new_user():    """Create users"""    username = request.json.get('username')    password = request.json.get('password')    if (username is None or password is None or            User.query.filter_by(username = username).first() is not None):        abort(400)    user = User(username, password)    db.session.add(user)    db.session.commit()    return jsonify({'username': username}), 201@main.route('/todos/api/v1.0/todos', methods=['GET'])@auth.login_requireddef get_todos():    """ RESTful getting the entire todos"""    todos = Todo.query.filter_by(user=g.user).all()    return jsonify({'todos': [todo.to_json() for todo in todos]}), 200@main.route('/todos/api/v1.0/todo/<int:todo_id>', methods=['GET'])@auth.login_requireddef get_todo(todo_id):    todo_item = Todo.query.filter_by(user=g.user).get_or_404(todo_id)    if not todo_item:        abort(404)    return jsonify({'todo': todo_item.to_json()}), 200@main.route('/todos/api/v1.0/todo/create', methods=['POST'])@auth.login_requireddef create_todo():    if not request.json:        abort(400)    todo = Todo.from_json(g.user, request.json)    todo.user = g.user    db.session.add(todo)    db.session.commit()    return jsonify(todo.to_json()), 201@main.route('/todos/api/v1.0/todo/update/<int:todo_id>', methods=['PUT'])@auth.login_requireddef update_todo(todo_id):    if not request.json or not 'title' in request.json or not 'body' in request.json:        abort(400)    todo_item = Todo.query.filter_by(user=g.user).get_or_404(todo_id)    todo_item.title = request.json['title']    todo_item.body = request.json['body']    db.session.add(todo_item)    db.session.commit()    return jsonify({'todo': todo_item.to_json()}), 200@main.route('/todos/api/v1.0/todo/delete/<int:todo_id>', methods=['DELETE'])@auth.login_requireddef delete_todo(todo_id):    if not request.method == 'DELETE':        abort(400)    todo_item = Todo.query.filter_by(user=g.user).get_or_404(todo_id)    if todo_item is None:        abort(404)    db.session.delete(todo_item)    db.session.commit()    return jsonify({'result': 'Todo deleted.'}), 201